syntax = "proto2";

option java_package = "com.pjtsearch.opencontroller_lib_proto";
option java_multiple_files = true;
option go_package = "pjtsearch.com/opencontroller_lib_proto";

package model;

/** The root message representing a house. **/
message House {
  required string display_name = 1; // The name to be displayed by clients
  required string id = 2; // A unique identifier
  repeated Room rooms = 3; // The Rooms inside the House
  repeated Device devices = 4;  // The Devices inside the House
}

/** A message representing a room. */
message Room {
  required string display_name = 1; // The name to be displayed by clients
  required string id = 2; // A unique identifier
  repeated Controller controllers = 3; // The Controllers inside the Room
  optional Icon icon = 4 [default = ROOM]; // The icon of the Room to be displayed by clients
}

/** A message representing a controller */
message Controller {
  required string display_name = 1; // The name to be displayed by clients
  required string id = 2; // A unique identifier
  optional string brand_color = 3; // A brand color to be displayed by clients
  optional DisplayInterface display_interface = 4; // The interface for display clients for the Controller
}

/** A Controller interface for clients with displays */
message DisplayInterface {
  /**
   * The Widgets that make up the controller.
   * 
 * Implementation Notes: The layout of the widgets in the array is flexible for the client.
   */
  repeated Widget widgets = 1;
}

/** A message representing a controllable device */
message Device {
  required string id = 1; // A unique identifier
  repeated Lambda lambdas = 2; // The actions the Device is capable of
}

/** A message representing any controller widget that can be displayed by clients */
message Widget {
  optional bool expand = 1; // Whether to expand the widget to its maximum possible size on the client
  oneof inner {
    Button button = 2;
    Row row = 3;
    Column column = 4;
    ArrowLayout arrow_layout = 5;
    Space space = 6;
    TextInput text_input = 7;
    SwipePad swipe_pad = 8;
    MenuButton menu_button = 9;
  }
}

/** A button widget */
message Button {
  required Lambda on_click = 1; // Lambda to be run when the button is clicked
  optional Icon icon = 2; // Icon to be displayed by clients
  required string text = 3; // Text label displayed by clients
  optional Size size = 4 [default = SMALL]; // Size displayed by clients
}

/** A row layout widget */
message Row {
  repeated Widget children = 1; // Widgets contained in the Row
}

/** A column layout widget */
message Column {
  repeated Widget children = 1; // Widgets contained in the Column
}

/**
 * An arrow layout widget
 */
message ArrowLayout {
  required Widget top = 1; // The widget on the top
  required Widget bottom = 2; // The widget on the bottom
  required Widget left = 3; // The widget on the left
  required Widget right = 4; // The widget on the right
  required Widget center = 5; // The widget in the center
}

/** A directional swipable widget for navigation */
message SwipePad {
  required Lambda on_swipe_up = 1; // Lambda run on a swipe-up gesture
  required Lambda on_swipe_down = 2; // Lambda run on a swipe-down gesture
  required Lambda on_swipe_left = 3; // Lambda run on a swipe-left gesture
  required Lambda on_swipe_right = 4; // Lambda run on a swipe-right gesture
  required Lambda on_click = 5; // Lambda run on a click
  optional Lambda on_bottom_increase = 6; // Lambda run when the bottom increase action is triggered
  optional Lambda on_bottom_decrease = 7; // Lambda run when the bottom dencrease action is triggered
  optional Lambda on_bottom_click = 8; // Lambda run when the bottom click action is triggered
  optional Icon bottom_increase_icon = 9; // Icon for the bottom increase action button
  optional Icon bottom_decrease_icon = 10; // Icon for the bottom dencrease action button
}

/** A widget for inputting text */
message TextInput {
  /**
   * Lambda taking a TextInputAction run when the textinput value changes
   * 
 * Implementation Notes: A TextInputAction is passed to the Lambda as an argument
   */
  required Lambda on_input = 1;
  required string text = 3; // The text to be displayed by clients
  optional Icon icon = 2; // The icon to be displayed by clients
  optional Size size = 4 [default = SMALL]; // The size to be displayed by clients
}

/** An action from a TextInput widget */
message TextInputAction {
  oneof inner {
    string char = 1; // A character inserted
    bool backspace = 2; // A character deleted before the cursor
    bool cursor_left = 3; // The cursor move left
    bool cursor_right = 4; // The cursor move right
  }
}

/** A button widget that opens a menu with widgets */
message MenuButton {
  repeated Widget content = 1; // The content of the menu
  required string text = 2; // The text of the button to be displayed by clients
  optional Icon icon = 3; // The icon of the button to be displayed by clients
  optional Size size = 4 [default = SMALL]; // The size of the button to be displayed by clients
}

/** A widget for empty space */
message Space {}

/** An enum for the size of a widget */
enum Size {
  SMALL = 0;
  MEDIUM = 1;
  LARGE = 2;
}

/**
 * A lambda function
 *
 * The args will be passed to the inner function's optional parameters in order if they are unset
 */
message Lambda {
  optional string id = 1; // A unique identifier
  repeated string args = 2; // The arguments to accept from the arguments stack
  oneof inner {
    HttpFunc http = 3;
    TCPFunc tcp = 4;
    MacroFunc macro = 5;
    DelayFunc delay = 6;
    RefFunc ref = 7;
    ConcatenateFunc concatenate = 8;
    PushStackFunc push_stack = 9;
    string string = 10;
    PipeArgsFunc pipe_args = 11;
    PrependStackFunc prepend_stack = 12;
    SwitchFunc switch = 13;
    IsEqualFunc is_equal = 14;
    GetPropFunc get_prop = 15;
    int32 int32 = 16;
    int64 int64 = 17;
    float float = 18;
    GetIndexFunc get_index = 19;
  }
}

/**
 * A function that sends an HTTP request
 * 
 * Implementation Notes: Should return the result of the request as a string
 */
message HttpFunc {
  optional string url = 1; // The URL of the request
  optional HttpMethod method = 3; // The HTTP method of the request
}

/** An enum representing HTTP methods */
enum HttpMethod {
    GET = 0;
    HEAD = 1;
    POST = 2;
    PUT = 3;
    PATCH = 4;
    DELETE = 5;
}

/**
 * A function that sends an TCP request
 * 
 * Implementation Notes:
 * - Should return the result of the request as a string
 * - Should close after the request is sent
 */
message TCPFunc {
  optional string address = 1; // The IP address to send the request to
  optional string command = 2; // The payload to send in the request
}

/** A function that runs multiple Lambdas synchronously without piping the returns as arguments */
message MacroFunc {
  repeated Lambda lambdas = 1; // The Lambdas to run
}

/**
 * A function that runs multiple Lambdas synchronously and pipes the returns as arguments
 *
 * The arguments to the Lambda containing the PipeArgsFunc will be passed to the first Lambda
 */
message PipeArgsFunc {
  repeated Lambda lambdas = 1; // The Lambdas to run
}

/** A function that delays execution */
message DelayFunc {
  optional int32 time = 1; // The amount of time in milliseconds to delay
}

/**
 * A function that calls a Lambda in a Device
 *
 * The arguments to the current lambda will be passed to the referenced lambda
 */
message RefFunc {
  optional string device = 1; // The device to reference from
  optional string lambda = 2; // The Lambda to reference
}

/** Pushes the return of a lambda to the return of the enclosing lambda */
message PushStackFunc {
  optional Lambda lambda = 1; // The lambda whose return to push
}

/** Prepends the return of a lambda to the return of the enclosing lambda */
message PrependStackFunc {
  optional Lambda lambda = 1; // The lambda whose return to prepend
}

/** A function that concatenates multiple strings */
message ConcatenateFunc {
  repeated string strings = 1; // The strings to concatenate
}

/** A message that represents an if statement */
message Conditional {
  required Lambda if = 1; // The condition to run then
  required Lambda then = 2; // The lambda to run if the condition returns true
}

/** A function that runs the first conditional that is true, or otherwise the else lambda */
message SwitchFunc {
  repeated Conditional conditions = 1; // The conditions to try
  optional Lambda else = 2; // The default to be run if the conditions are all false
}

/** A function that compares the equality of two values of the same type */
message IsEqualFunc {
  oneof from {
    string from_string = 1;
    int64 from_int64 = 2;
    int32 from_int32 = 3;
    float from_float = 4;
    bool from_bool = 5;
  }
  oneof to {
    string to_string = 6;
    int64 to_int64 = 7;
    int32 to_int32 = 8;
    float to_float = 9;
    bool to_bool = 10;
  }
}

/**
 * Indexes a property from another message or map
 * 
 * Implementation Notes: Takes an argument for the message/map
 */
message GetPropFunc {
  optional string prop = 1; // The property to index
}

/**
 * Indexes an array
 * 
 * Implementation Notes: Takes an argument for the array
 */
message GetIndexFunc {
  optional int32 index = 1; // The index to get
}

/** An enum representing icons that can be displayed by the client */
enum Icon {
  STAR = 0;
  ARROW_UP = 1;
  ARROW_DOWN = 2;
  ARROW_LEFT = 3;
  ARROW_RIGHT = 4;
  SELECT = 5;
  VOLUME_UP = 6;
  VOLUME_DOWN = 7;
  VOLUME_MUTE = 8;
  BACK = 9;
  ON = 10;
  OFF = 11;
  FORWARD = 12;
  REVERSE = 13;
  INFO = 14;
  HOME = 15;
  CHANNEL_UP = 16;
  CHANNEL_DOWN = 17;
  CHANNEL = 18;
  REMOVE = 19;
  STOP = 20;
  SKIP_FORWARD = 21;
  SKIP_REVERSE = 22;
  RECORD = 23;
  PAUSE = 24;
  PLAY = 25;
  GUIDE = 26;
  DVR = 27;
  MENU = 28;
  OPTIONS = 29;
  EXIT = 30;
  ASTERISK = 31;
  POUND = 32;
  CLOSED_CAPTIONS = 33;
  GARAGE = 34;
  LAUNDRY = 35;
  KITCHEN = 36;
  NOOK = 37;
  FAMILY_ROOM = 38;
  LIVING_ROOM = 39;
  MEDIA_ROOM = 40;
  DINING_ROOM = 41;
  ENTRY = 42;
  MASTER_BEDROOM = 43;
  EXERCISE_ROOM = 44;
  PLAY_ROOM = 45;
  BEDROOM = 46;
  ROOM = 47;
  MENU_ALT = 48;
  PLUS = 49;
  MINUS = 50;
}