/**
 * OpenController Proto
 *
 * A Protocol Buffer schema representing an OpenController module.
*/
syntax = "proto2";

option java_package = "com.pjtsearch.opencontroller_lib_proto";
option java_multiple_files = true;
option go_package = "pjtsearch.com/opencontroller_lib_proto";

package model;

/** The root message representing a house. **/
message HouseExpr {
    required Expr display_name = 1; // The name to be displayed by clients
    required Expr id = 2; // A unique identifier
    map<string, Expr> rooms = 3; // The Rooms inside the House
}

/** A message representing a room. */
message RoomExpr {
    required Expr display_name = 1; // The name to be displayed by clients
    map<string, Expr> controllers = 2; // The Controllers inside the Room
    optional Expr icon = 3; // The icon of the Room to be displayed by clients
}

/** A message representing a controller */
message ControllerExpr {
    required Expr display_name = 1; // The name to be displayed by clients
    optional Expr brand_color = 2; // A brand color to be displayed by clients
    optional Expr display_interface = 3; // The interface for display clients for the Controller
}

/** A Controller interface for clients with displays */
message DisplayInterfaceExpr {
    /**
        * The Widgets that make up the controller.
        * 
    * Implementation Notes: The layout of the widgets in the array is flexible for the client.
        */
    repeated Expr widgets = 1;
}

/** A message representing a controllable device */
message DeviceExpr {
    map<string, Expr> lambdas = 1; // The actions the Device is capable of
}

/** A message representing any controller widget that can be displayed by clients */
message WidgetExpr {
    required string widget_type = 2; // The type of widget
    map<string, Expr> params = 3; // The parameters to the widget
    repeated Expr children = 4; // The children of the widget
}

/** A message representing a reference to the cope */
message RefExpr {
    required string ref = 1; // The name of the desired reference in the scope
}

/** A message representing a lambda expression */
message LambdaExpr {
    repeated string args = 1; // The args to the lambda
    required Expr return = 2; // The return of the lambda
}

/** A message representing a function call */
message CallExpr {
    required Expr calling = 1; // The expression to call
    repeated Expr args = 2; // The arguments to pass
}

/** A message representing an else-if */
message Elif {
    required Expr condition = 1; // The condition to call if
    required Expr then = 2; // The expression to call
}

/** A message representing an if expression */
message IfExpr {
    required Expr condition = 1; // The condition to call if
    required Expr then = 2; // The expression to call
    repeated Elif elif = 3; // The else-if conditions
    required Expr else = 4; // The else condition
}

/** A message representing an expression */
message Expr {
    /** The type of expression */
    oneof inner {
        RefExpr ref = 1;
        LambdaExpr lambda = 2;
        CallExpr call = 3;
        string string = 4;
        int64 int64 = 5;
        int32 int32 = 6;
        float float = 7;
        bool bool = 8;
        HouseExpr house = 9;
        RoomExpr room = 10;
        ControllerExpr controller = 11;
        DisplayInterfaceExpr display_interface = 12;
        DeviceExpr device = 13;
        WidgetExpr widget = 14;
        IfExpr if = 15;
    }
}

/** A message representing an OpenController module */
message Module {
    map<string, Module> imports = 1; // The imports of the module
    required Expr body = 2; // The body of the module
}
