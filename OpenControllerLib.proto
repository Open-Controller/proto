/**
 * OpenController Proto
 *
 * A Protocol Buffer schema representing an OpenController house.
*/
syntax = "proto2";

option java_package = "com.pjtsearch.opencontroller_lib_proto";
option java_multiple_files = true;
option go_package = "pjtsearch.com/opencontroller_lib_proto";

package model;

/** The root message representing a house. **/
message HouseStmt {
    required string display_name = 1; // The name to be displayed by clients
    required string id = 2; // A unique identifier
    repeated RoomStmt rooms = 3; // The Rooms inside the House
    repeated DeviceStmt devices = 4;  // The Devices inside the House
}

/** A message representing a room. */
message RoomStmt {
    required string display_name = 1; // The name to be displayed by clients
    required string id = 2; // A unique identifier
    repeated ControllerStmt controllers = 3; // The Controllers inside the Room
    optional string icon = 4 [default = "room"]; // The icon of the Room to be displayed by clients
}

/** A message representing a controller */
message ControllerStmt {
    required string display_name = 1; // The name to be displayed by clients
    required string id = 2; // A unique identifier
    optional string brand_color = 3; // A brand color to be displayed by clients
    optional DisplayInterfaceStmt display_interface = 4; // The interface for display clients for the Controller
}

/** A Controller interface for clients with displays */
message DisplayInterfaceStmt {
    /**
        * The Widgets that make up the controller.
        * 
    * Implementation Notes: The layout of the widgets in the array is flexible for the client.
        */
    repeated WidgetStmt widgets = 1;
}

/** A message representing a controllable device */
message DeviceStmt {
    required string id = 1; // A unique identifier
    map<string, LambdaExpr> lambdas = 2; // The actions the Device is capable of
}

/** A message representing any controller widget that can be displayed by clients */
message WidgetStmt {
    optional bool expand = 1; // Whether to expand the widget to its maximum possible size on the client
    required string widget_type = 2;
    map<string, Expr> params = 3;
    repeated WidgetStmt children = 4;
}

message Stmt {
    oneof inner {
        HouseStmt house = 1;
        RoomStmt room = 2;
        ControllerStmt controller = 3;
        DisplayInterfaceStmt display_interface = 4;
        DeviceStmt device = 5;
        WidgetStmt widget = 6;
    }
}

message RefExpr {
    required string ref = 1;
}

message LambdaExpr {
    repeated string args = 1;
    required Expr return = 2;
}

message CallExpr {
    required Expr calling = 1;
    repeated Expr args = 2;
}

message Expr {
    oneof inner {
        RefExpr ref = 1;
        LambdaExpr lambda = 2;
        CallExpr call = 3;
        string string = 4;
        int64 int64 = 5;
        int32 int32 = 6;
        float float = 7;
        bool bool = 8;
    }
}